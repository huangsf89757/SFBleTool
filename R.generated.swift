//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }
    var main: main { .init(source: .init(bundle: bundle, tableName: "Main", preferredLanguages: preferredLanguages, locale: locale)) }

    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }
    func main(preferredLanguages: [String]) -> main {
      .init(source: .init(bundle: bundle, tableName: "Main", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 124 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: BleMessager
      ///
      /// Key: CFBundleDisplayName
      ///
      /// Locales: en, zh-Hans
      var cfBundleDisplayName: RswiftResources.StringResource { .init(key: "CFBundleDisplayName", tableName: "Localizable", source: source, developmentValue: "BleMessager", comment: nil) }

      /// en translation: CBAdvertisementDataIsConnectable
      ///
      /// Key: central_adv_key_connectable
      ///
      /// Locales: en, zh-Hans
      var central_adv_key_connectable: RswiftResources.StringResource { .init(key: "central_adv_key_connectable", tableName: "Localizable", source: source, developmentValue: "CBAdvertisementDataIsConnectable", comment: nil) }

      /// en translation: CBAdvertisementDataLocalNameKey
      ///
      /// Key: central_adv_key_localName
      ///
      /// Locales: en, zh-Hans
      var central_adv_key_localName: RswiftResources.StringResource { .init(key: "central_adv_key_localName", tableName: "Localizable", source: source, developmentValue: "CBAdvertisementDataLocalNameKey", comment: nil) }

      /// en translation: CBAdvertisementDataManufacturerDataKey
      ///
      /// Key: central_adv_key_manufacturer
      ///
      /// Locales: en, zh-Hans
      var central_adv_key_manufacturer: RswiftResources.StringResource { .init(key: "central_adv_key_manufacturer", tableName: "Localizable", source: source, developmentValue: "CBAdvertisementDataManufacturerDataKey", comment: nil) }

      /// en translation: CBAdvertisementDataOverflowServiceUUIDsKey
      ///
      /// Key: central_adv_key_overflowUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_key_overflowUuid: RswiftResources.StringResource { .init(key: "central_adv_key_overflowUuid", tableName: "Localizable", source: source, developmentValue: "CBAdvertisementDataOverflowServiceUUIDsKey", comment: nil) }

      /// en translation: CBAdvertisementDataServiceUUIDsKey
      ///
      /// Key: central_adv_key_serviceUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_key_serviceUuid: RswiftResources.StringResource { .init(key: "central_adv_key_serviceUuid", tableName: "Localizable", source: source, developmentValue: "CBAdvertisementDataServiceUUIDsKey", comment: nil) }

      /// en translation: CBAdvertisementDataSolicitedServiceUUIDsKey
      ///
      /// Key: central_adv_key_solicitedUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_key_solicitedUuid: RswiftResources.StringResource { .init(key: "central_adv_key_solicitedUuid", tableName: "Localizable", source: source, developmentValue: "CBAdvertisementDataSolicitedServiceUUIDsKey", comment: nil) }

      /// en translation: CBAdvertisementDataServiceDataKey
      ///
      /// Key: central_adv_key_specificService
      ///
      /// Locales: en, zh-Hans
      var central_adv_key_specificService: RswiftResources.StringResource { .init(key: "central_adv_key_specificService", tableName: "Localizable", source: source, developmentValue: "CBAdvertisementDataServiceDataKey", comment: nil) }

      /// en translation: CBAdvertisementDataTxPowerLevelKey
      ///
      /// Key: central_adv_key_txPower
      ///
      /// Locales: en, zh-Hans
      var central_adv_key_txPower: RswiftResources.StringResource { .init(key: "central_adv_key_txPower", tableName: "Localizable", source: source, developmentValue: "CBAdvertisementDataTxPowerLevelKey", comment: nil) }

      /// en translation: A Boolean value that indicates whether the advertising event type is connectable.
      ///
      /// Key: central_adv_subtitle_connectable
      ///
      /// Locales: en, zh-Hans
      var central_adv_subtitle_connectable: RswiftResources.StringResource { .init(key: "central_adv_subtitle_connectable", tableName: "Localizable", source: source, developmentValue: "A Boolean value that indicates whether the advertising event type is connectable.", comment: nil) }

      /// en translation: The local name of a peripheral.
      ///
      /// Key: central_adv_subtitle_localName
      ///
      /// Locales: en, zh-Hans
      var central_adv_subtitle_localName: RswiftResources.StringResource { .init(key: "central_adv_subtitle_localName", tableName: "Localizable", source: source, developmentValue: "The local name of a peripheral.", comment: nil) }

      /// en translation: The manufacturer data of a peripheral.
      ///
      /// Key: central_adv_subtitle_manufacturer
      ///
      /// Locales: en, zh-Hans
      var central_adv_subtitle_manufacturer: RswiftResources.StringResource { .init(key: "central_adv_subtitle_manufacturer", tableName: "Localizable", source: source, developmentValue: "The manufacturer data of a peripheral.", comment: nil) }

      /// en translation: An array of UUIDs found in the overflow area of the advertisement data.
      ///
      /// Key: central_adv_subtitle_overflowUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_subtitle_overflowUuid: RswiftResources.StringResource { .init(key: "central_adv_subtitle_overflowUuid", tableName: "Localizable", source: source, developmentValue: "An array of UUIDs found in the overflow area of the advertisement data.", comment: nil) }

      /// en translation: An array of service UUIDs.
      ///
      /// Key: central_adv_subtitle_serviceUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_subtitle_serviceUuid: RswiftResources.StringResource { .init(key: "central_adv_subtitle_serviceUuid", tableName: "Localizable", source: source, developmentValue: "An array of service UUIDs.", comment: nil) }

      /// en translation: An array of solicited service UUIDs.
      ///
      /// Key: central_adv_subtitle_solicitedUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_subtitle_solicitedUuid: RswiftResources.StringResource { .init(key: "central_adv_subtitle_solicitedUuid", tableName: "Localizable", source: source, developmentValue: "An array of solicited service UUIDs.", comment: nil) }

      /// en translation: A dictionary that contains service-specific advertisement data.
      ///
      /// Key: central_adv_subtitle_specificService
      ///
      /// Locales: en, zh-Hans
      var central_adv_subtitle_specificService: RswiftResources.StringResource { .init(key: "central_adv_subtitle_specificService", tableName: "Localizable", source: source, developmentValue: "A dictionary that contains service-specific advertisement data.", comment: nil) }

      /// en translation: The transmit power of a peripheral.
      ///
      /// Key: central_adv_subtitle_txPower
      ///
      /// Locales: en, zh-Hans
      var central_adv_subtitle_txPower: RswiftResources.StringResource { .init(key: "central_adv_subtitle_txPower", tableName: "Localizable", source: source, developmentValue: "The transmit power of a peripheral.", comment: nil) }

      /// en translation: Connectable
      ///
      /// Key: central_adv_title_connectable
      ///
      /// Locales: en, zh-Hans
      var central_adv_title_connectable: RswiftResources.StringResource { .init(key: "central_adv_title_connectable", tableName: "Localizable", source: source, developmentValue: "Connectable", comment: nil) }

      /// en translation: Local Name
      ///
      /// Key: central_adv_title_localName
      ///
      /// Locales: en, zh-Hans
      var central_adv_title_localName: RswiftResources.StringResource { .init(key: "central_adv_title_localName", tableName: "Localizable", source: source, developmentValue: "Local Name", comment: nil) }

      /// en translation: Manufacturer
      ///
      /// Key: central_adv_title_manufacturer
      ///
      /// Locales: en, zh-Hans
      var central_adv_title_manufacturer: RswiftResources.StringResource { .init(key: "central_adv_title_manufacturer", tableName: "Localizable", source: source, developmentValue: "Manufacturer", comment: nil) }

      /// en translation: Overflow Uuid
      ///
      /// Key: central_adv_title_overflowUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_title_overflowUuid: RswiftResources.StringResource { .init(key: "central_adv_title_overflowUuid", tableName: "Localizable", source: source, developmentValue: "Overflow Uuid", comment: nil) }

      /// en translation: Service Uuid
      ///
      /// Key: central_adv_title_serviceUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_title_serviceUuid: RswiftResources.StringResource { .init(key: "central_adv_title_serviceUuid", tableName: "Localizable", source: source, developmentValue: "Service Uuid", comment: nil) }

      /// en translation: Solicited Uuid
      ///
      /// Key: central_adv_title_solicitedUuid
      ///
      /// Locales: en, zh-Hans
      var central_adv_title_solicitedUuid: RswiftResources.StringResource { .init(key: "central_adv_title_solicitedUuid", tableName: "Localizable", source: source, developmentValue: "Solicited Uuid", comment: nil) }

      /// en translation: Specific Service
      ///
      /// Key: central_adv_title_specificService
      ///
      /// Locales: en, zh-Hans
      var central_adv_title_specificService: RswiftResources.StringResource { .init(key: "central_adv_title_specificService", tableName: "Localizable", source: source, developmentValue: "Specific Service", comment: nil) }

      /// en translation: Tx Power
      ///
      /// Key: central_adv_title_txPower
      ///
      /// Locales: en, zh-Hans
      var central_adv_title_txPower: RswiftResources.StringResource { .init(key: "central_adv_title_txPower", tableName: "Localizable", source: source, developmentValue: "Tx Power", comment: nil) }

      /// en translation: 扫描中
      ///
      /// Key: central_ble_scan_doing
      ///
      /// Locales: en, zh-Hans
      var central_ble_scan_doing: RswiftResources.StringResource { .init(key: "central_ble_scan_doing", tableName: "Localizable", source: source, developmentValue: "扫描中", comment: nil) }

      /// en translation: 开始扫描
      ///
      /// Key: central_ble_scan_paused
      ///
      /// Locales: en, zh-Hans
      var central_ble_scan_paused: RswiftResources.StringResource { .init(key: "central_ble_scan_paused", tableName: "Localizable", source: source, developmentValue: "开始扫描", comment: nil) }

      /// en translation: 广播
      ///
      /// Key: central_detail_item_adv
      ///
      /// Locales: en, zh-Hans
      var central_detail_item_adv: RswiftResources.StringResource { .init(key: "central_detail_item_adv", tableName: "Localizable", source: source, developmentValue: "广播", comment: nil) }

      /// en translation: 日志
      ///
      /// Key: central_detail_item_log
      ///
      /// Locales: en, zh-Hans
      var central_detail_item_log: RswiftResources.StringResource { .init(key: "central_detail_item_log", tableName: "Localizable", source: source, developmentValue: "日志", comment: nil) }

      /// en translation: 服务
      ///
      /// Key: central_detail_item_service
      ///
      /// Locales: en, zh-Hans
      var central_detail_item_service: RswiftResources.StringResource { .init(key: "central_detail_item_service", tableName: "Localizable", source: source, developmentValue: "服务", comment: nil) }

      /// en translation: RSSI
      ///
      /// Key: central_filter_RSSI
      ///
      /// Locales: en, zh-Hans
      var central_filter_RSSI: RswiftResources.StringResource { .init(key: "central_filter_RSSI", tableName: "Localizable", source: source, developmentValue: "RSSI", comment: nil) }

      /// en translation: 重置
      ///
      /// Key: central_filter_reset
      ///
      /// Locales: en, zh-Hans
      var central_filter_reset: RswiftResources.StringResource { .init(key: "central_filter_reset", tableName: "Localizable", source: source, developmentValue: "重置", comment: nil) }

      /// en translation: 确认
      ///
      /// Key: central_filter_sure
      ///
      /// Locales: en, zh-Hans
      var central_filter_sure: RswiftResources.StringResource { .init(key: "central_filter_sure", tableName: "Localizable", source: source, developmentValue: "确认", comment: nil) }

      /// en translation: 过滤
      ///
      /// Key: central_filter_title
      ///
      /// Locales: en, zh-Hans
      var central_filter_title: RswiftResources.StringResource { .init(key: "central_filter_title", tableName: "Localizable", source: source, developmentValue: "过滤", comment: nil) }

      /// en translation: UUID
      ///
      /// Key: central_filter_uuid
      ///
      /// Locales: en, zh-Hans
      var central_filter_uuid: RswiftResources.StringResource { .init(key: "central_filter_uuid", tableName: "Localizable", source: source, developmentValue: "UUID", comment: nil) }

      /// en translation: 请输入UUID
      ///
      /// Key: central_filter_uuid_ph
      ///
      /// Locales: en, zh-Hans
      var central_filter_uuid_ph: RswiftResources.StringResource { .init(key: "central_filter_uuid_ph", tableName: "Localizable", source: source, developmentValue: "请输入UUID", comment: nil) }

      /// en translation: 请输入设备名称
      ///
      /// Key: central_search_ph
      ///
      /// Locales: en, zh-Hans
      var central_search_ph: RswiftResources.StringResource { .init(key: "central_search_ph", tableName: "Localizable", source: source, developmentValue: "请输入设备名称", comment: nil) }

      /// en translation: RSSI
      ///
      /// Key: central_sort_RSSI
      ///
      /// Locales: en, zh-Hans
      var central_sort_RSSI: RswiftResources.StringResource { .init(key: "central_sort_RSSI", tableName: "Localizable", source: source, developmentValue: "RSSI", comment: nil) }

      /// en translation: 名称
      ///
      /// Key: central_sort_name
      ///
      /// Locales: en, zh-Hans
      var central_sort_name: RswiftResources.StringResource { .init(key: "central_sort_name", tableName: "Localizable", source: source, developmentValue: "名称", comment: nil) }

      /// en translation: 取消
      ///
      /// Key: com_cancel
      ///
      /// Locales: en
      var com_cancel: RswiftResources.StringResource { .init(key: "com_cancel", tableName: "Localizable", source: source, developmentValue: "取消", comment: nil) }

      /// en translation: 编辑
      ///
      /// Key: com_edit
      ///
      /// Locales: en
      var com_edit: RswiftResources.StringResource { .init(key: "com_edit", tableName: "Localizable", source: source, developmentValue: "编辑", comment: nil) }

      /// en translation: 保存
      ///
      /// Key: com_save
      ///
      /// Locales: en
      var com_save: RswiftResources.StringResource { .init(key: "com_save", tableName: "Localizable", source: source, developmentValue: "保存", comment: nil) }

      /// en translation: 确定
      ///
      /// Key: com_sure
      ///
      /// Locales: en
      var com_sure: RswiftResources.StringResource { .init(key: "com_sure", tableName: "Localizable", source: source, developmentValue: "确定", comment: nil) }

      /// en translation: Copyright @ 2024-2034
      ///
      /// Key: copyright
      ///
      /// Locales: en
      var copyright: RswiftResources.StringResource { .init(key: "copyright", tableName: "Localizable", source: source, developmentValue: "Copyright @ 2024-2034", comment: nil) }

      /// en translation: 手机作为中央设备来扫描和连接周围的蓝牙外设
      ///
      /// Key: entrance_opt_central_subtitle
      ///
      /// Locales: en, zh-Hans
      var entrance_opt_central_subtitle: RswiftResources.StringResource { .init(key: "entrance_opt_central_subtitle", tableName: "Localizable", source: source, developmentValue: "手机作为中央设备来扫描和连接周围的蓝牙外设", comment: nil) }

      /// en translation: 中心模式
      ///
      /// Key: entrance_opt_central_title
      ///
      /// Locales: en, zh-Hans
      var entrance_opt_central_title: RswiftResources.StringResource { .init(key: "entrance_opt_central_title", tableName: "Localizable", source: source, developmentValue: "中心模式", comment: nil) }

      /// en translation: 手机作为外围设备广播数据
      ///
      /// Key: entrance_opt_peripheral_subtitle
      ///
      /// Locales: en, zh-Hans
      var entrance_opt_peripheral_subtitle: RswiftResources.StringResource { .init(key: "entrance_opt_peripheral_subtitle", tableName: "Localizable", source: source, developmentValue: "手机作为外围设备广播数据", comment: nil) }

      /// en translation: 外设模式
      ///
      /// Key: entrance_opt_peripheral_title
      ///
      /// Locales: en, zh-Hans
      var entrance_opt_peripheral_title: RswiftResources.StringResource { .init(key: "entrance_opt_peripheral_title", tableName: "Localizable", source: source, developmentValue: "外设模式", comment: nil) }

      /// en translation: BleMessager
      ///
      /// Key: name
      ///
      /// Locales: en, zh-Hans
      var name: RswiftResources.StringResource { .init(key: "name", tableName: "Localizable", source: source, developmentValue: "BleMessager", comment: nil) }

      /// en translation: 蓝牙通信，畅享每一刻。
      ///
      /// Key: slogen
      ///
      /// Locales: en, zh-Hans
      var slogen: RswiftResources.StringResource { .init(key: "slogen", tableName: "Localizable", source: source, developmentValue: "蓝牙通信，畅享每一刻。", comment: nil) }

      /// en translation: 个人中心
      ///
      /// Key: user_center
      ///
      /// Locales: en
      var user_center: RswiftResources.StringResource { .init(key: "user_center", tableName: "Localizable", source: source, developmentValue: "个人中心", comment: nil) }

      /// en translation: 中心设备
      ///
      /// Key: user_center_item_central
      ///
      /// Locales: en
      var user_center_item_central: RswiftResources.StringResource { .init(key: "user_center_item_central", tableName: "Localizable", source: source, developmentValue: "中心设备", comment: nil) }

      /// en translation: 外围设备
      ///
      /// Key: user_center_item_peripheral
      ///
      /// Locales: en
      var user_center_item_peripheral: RswiftResources.StringResource { .init(key: "user_center_item_peripheral", tableName: "Localizable", source: source, developmentValue: "外围设备", comment: nil) }

      /// en translation: 账号安全
      ///
      /// Key: user_center_item_security
      ///
      /// Locales: en
      var user_center_item_security: RswiftResources.StringResource { .init(key: "user_center_item_security", tableName: "Localizable", source: source, developmentValue: "账号安全", comment: nil) }

      /// en translation: 中心设备
      ///
      /// Key: user_central
      ///
      /// Locales: en
      var user_central: RswiftResources.StringResource { .init(key: "user_central", tableName: "Localizable", source: source, developmentValue: "中心设备", comment: nil) }

      /// en translation: Connection Option
      ///
      /// Key: user_central_detail_connect
      ///
      /// Locales: en
      var user_central_detail_connect: RswiftResources.StringResource { .init(key: "user_central_detail_connect", tableName: "Localizable", source: source, developmentValue: "Connection Option", comment: nil) }

      /// en translation: CBConnectPeripheralOptionEnableAutoReconnect
      ///
      /// Key: user_central_detail_connect_key_isEnableAutoReconnect
      ///
      /// Locales: en
      var user_central_detail_connect_key_isEnableAutoReconnect: RswiftResources.StringResource { .init(key: "user_central_detail_connect_key_isEnableAutoReconnect", tableName: "Localizable", source: source, developmentValue: "CBConnectPeripheralOptionEnableAutoReconnect", comment: nil) }

      /// en translation: CBConnectPeripheralOptionEnableTransportBridgingKey
      ///
      /// Key: user_central_detail_connect_key_isEnableTransportBridging
      ///
      /// Locales: en
      var user_central_detail_connect_key_isEnableTransportBridging: RswiftResources.StringResource { .init(key: "user_central_detail_connect_key_isEnableTransportBridging", tableName: "Localizable", source: source, developmentValue: "CBConnectPeripheralOptionEnableTransportBridgingKey", comment: nil) }

      /// en translation: CBConnectPeripheralOptionNotifyOnConnectionKey
      ///
      /// Key: user_central_detail_connect_key_isNotifyOnConnection
      ///
      /// Locales: en
      var user_central_detail_connect_key_isNotifyOnConnection: RswiftResources.StringResource { .init(key: "user_central_detail_connect_key_isNotifyOnConnection", tableName: "Localizable", source: source, developmentValue: "CBConnectPeripheralOptionNotifyOnConnectionKey", comment: nil) }

      /// en translation: CBConnectPeripheralOptionNotifyOnDisconnectionKey
      ///
      /// Key: user_central_detail_connect_key_isNotifyOnDisconnection
      ///
      /// Locales: en
      var user_central_detail_connect_key_isNotifyOnDisconnection: RswiftResources.StringResource { .init(key: "user_central_detail_connect_key_isNotifyOnDisconnection", tableName: "Localizable", source: source, developmentValue: "CBConnectPeripheralOptionNotifyOnDisconnectionKey", comment: nil) }

      /// en translation: CBConnectPeripheralOptionNotifyOnNotificationKey
      ///
      /// Key: user_central_detail_connect_key_isNotifyOnNotification
      ///
      /// Locales: en
      var user_central_detail_connect_key_isNotifyOnNotification: RswiftResources.StringResource { .init(key: "user_central_detail_connect_key_isNotifyOnNotification", tableName: "Localizable", source: source, developmentValue: "CBConnectPeripheralOptionNotifyOnNotificationKey", comment: nil) }

      /// en translation: CBConnectPeripheralOptionRequiresANCS
      ///
      /// Key: user_central_detail_connect_key_isRequiresANCS
      ///
      /// Locales: en
      var user_central_detail_connect_key_isRequiresANCS: RswiftResources.StringResource { .init(key: "user_central_detail_connect_key_isRequiresANCS", tableName: "Localizable", source: source, developmentValue: "CBConnectPeripheralOptionRequiresANCS", comment: nil) }

      /// en translation: CBConnectPeripheralOptionStartDelayKey
      ///
      /// Key: user_central_detail_connect_key_startDelay
      ///
      /// Locales: en
      var user_central_detail_connect_key_startDelay: RswiftResources.StringResource { .init(key: "user_central_detail_connect_key_startDelay", tableName: "Localizable", source: source, developmentValue: "CBConnectPeripheralOptionStartDelayKey", comment: nil) }

      /// en translation: 系统是否自动重新连接到外围设备。 外围设备连接后，此设置使系统能够在链路断开时自动启动与对等设备的连接。系统用于 `centralManager(_:didDisconnectPeripheral:timestamp:isReconnecting:error:)` 通知呼叫者断开连接。
      ///
      /// Key: user_central_detail_connect_subtitle_isEnableAutoReconnect
      ///
      /// Locales: en
      var user_central_detail_connect_subtitle_isEnableAutoReconnect: RswiftResources.StringResource { .init(key: "user_central_detail_connect_subtitle_isEnableAutoReconnect", tableName: "Localizable", source: source, developmentValue: "系统是否自动重新连接到外围设备。\n外围设备连接后，此设置使系统能够在链路断开时自动启动与对等设备的连接。系统用于 `centralManager(_:didDisconnectPeripheral:timestamp:isReconnecting:error:)` 通知呼叫者断开连接。", comment: nil) }

      /// en translation: 是否桥接经典蓝牙技术配置文件。 如果与同一设备有低功耗的 GATT 连接，此选项会告诉系统在经典蓝牙设备上连接非 GATT 配置文件。 `true` 值指示系统在连接低能耗传输外围设备时调出经典传输配置文件。 `false` 值告诉系统不要使用配置文件。
      ///
      /// Key: user_central_detail_connect_subtitle_isEnableTransportBridging
      ///
      /// Locales: en
      var user_central_detail_connect_subtitle_isEnableTransportBridging: RswiftResources.StringResource { .init(key: "user_central_detail_connect_subtitle_isEnableTransportBridging", tableName: "Localizable", source: source, developmentValue: "是否桥接经典蓝牙技术配置文件。\n如果与同一设备有低功耗的 GATT 连接，此选项会告诉系统在经典蓝牙设备上连接非 GATT 配置文件。\n`true` 值指示系统在连接低能耗传输外围设备时调出经典传输配置文件。\n`false` 值告诉系统不要使用配置文件。", comment: nil) }

      /// en translation: 指定系统在后台连接外围设备时是否应显示警报。 此键对于未指定 `bluetooth-central` 后台模式且无法显示自己的警报的应用非常有用。 如果多个应用请求给定外围设备的通知，则最近处于前台的外围设备将收到警报。 如果未指定键，则默认值为 `false`。
      ///
      /// Key: user_central_detail_connect_subtitle_isNotifyOnConnection
      ///
      /// Locales: en
      var user_central_detail_connect_subtitle_isNotifyOnConnection: RswiftResources.StringResource { .init(key: "user_central_detail_connect_subtitle_isNotifyOnConnection", tableName: "Localizable", source: source, developmentValue: "指定系统在后台连接外围设备时是否应显示警报。\n此键对于未指定 `bluetooth-central` 后台模式且无法显示自己的警报的应用非常有用。\n如果多个应用请求给定外围设备的通知，则最近处于前台的外围设备将收到警报。\n如果未指定键，则默认值为 `false`。", comment: nil) }

      /// en translation: 指定在后台断开外围设备连接时系统是否应显示警报。 此键对于未指定 `bluetooth-central` 后台模式且无法显示自己的警报的应用非常有用。 如果多个应用请求给定外围设备的通知，则最近处于前台的外围设备将收到警报。 如果未指定键，则默认值为 `false`。
      ///
      /// Key: user_central_detail_connect_subtitle_isNotifyOnDisconnection
      ///
      /// Locales: en
      var user_central_detail_connect_subtitle_isNotifyOnDisconnection: RswiftResources.StringResource { .init(key: "user_central_detail_connect_subtitle_isNotifyOnDisconnection", tableName: "Localizable", source: source, developmentValue: "指定在后台断开外围设备连接时系统是否应显示警报。\n此键对于未指定 `bluetooth-central` 后台模式且无法显示自己的警报的应用非常有用。\n如果多个应用请求给定外围设备的通知，则最近处于前台的外围设备将收到警报。\n如果未指定键，则默认值为 `false`。", comment: nil) }

      /// en translation: 指定系统是否应针对外围设备发送的任何通知显示警报。 此键对于未指定 `bluetooth-central` 后台模式且无法显示自己的警报的应用非常有用。 如果多个应用请求给定外围设备的通知，则最近处于前台的外围设备将收到警报。 如果未指定键，则默认值为 `false`。 如果 `true` 为 ，则系统会针对应用挂起时从给定外围设备接收的所有通知显示警报
      ///
      /// Key: user_central_detail_connect_subtitle_isNotifyOnNotification
      ///
      /// Locales: en
      var user_central_detail_connect_subtitle_isNotifyOnNotification: RswiftResources.StringResource { .init(key: "user_central_detail_connect_subtitle_isNotifyOnNotification", tableName: "Localizable", source: source, developmentValue: "指定系统是否应针对外围设备发送的任何通知显示警报。\n此键对于未指定 `bluetooth-central` 后台模式且无法显示自己的警报的应用非常有用。\n如果多个应用请求给定外围设备的通知，则最近处于前台的外围设备将收到警报。\n如果未指定键，则默认值为 `false`。\n如果 `true` 为 ，则系统会针对应用挂起时从给定外围设备接收的所有通知显示警报", comment: nil) }

      /// en translation: 连接设备时是否需要Apple通知中心服务（ANCS）。
      ///
      /// Key: user_central_detail_connect_subtitle_isRequiresANCS
      ///
      /// Locales: en
      var user_central_detail_connect_subtitle_isRequiresANCS: RswiftResources.StringResource { .init(key: "user_central_detail_connect_subtitle_isRequiresANCS", tableName: "Localizable", source: source, developmentValue: "连接设备时是否需要Apple通知中心服务（ANCS）。", comment: nil) }

      /// en translation: 指示系统建立连接之前的延迟时间。
      ///
      /// Key: user_central_detail_connect_subtitle_startDelay
      ///
      /// Locales: en
      var user_central_detail_connect_subtitle_startDelay: RswiftResources.StringResource { .init(key: "user_central_detail_connect_subtitle_startDelay", tableName: "Localizable", source: source, developmentValue: "指示系统建立连接之前的延迟时间。", comment: nil) }

      /// en translation: isEnableAutoReconnect: Bool?
      ///
      /// Key: user_central_detail_connect_title_isEnableAutoReconnect
      ///
      /// Locales: en
      var user_central_detail_connect_title_isEnableAutoReconnect: RswiftResources.StringResource { .init(key: "user_central_detail_connect_title_isEnableAutoReconnect", tableName: "Localizable", source: source, developmentValue: "isEnableAutoReconnect: Bool?", comment: nil) }

      /// en translation: isEnableTransportBridging: Bool?
      ///
      /// Key: user_central_detail_connect_title_isEnableTransportBridging
      ///
      /// Locales: en
      var user_central_detail_connect_title_isEnableTransportBridging: RswiftResources.StringResource { .init(key: "user_central_detail_connect_title_isEnableTransportBridging", tableName: "Localizable", source: source, developmentValue: "isEnableTransportBridging: Bool?", comment: nil) }

      /// en translation: isNotifyOnConnection: Bool
      ///
      /// Key: user_central_detail_connect_title_isNotifyOnConnection
      ///
      /// Locales: en
      var user_central_detail_connect_title_isNotifyOnConnection: RswiftResources.StringResource { .init(key: "user_central_detail_connect_title_isNotifyOnConnection", tableName: "Localizable", source: source, developmentValue: "isNotifyOnConnection: Bool", comment: nil) }

      /// en translation: isNotifyOnDisconnection: Bool
      ///
      /// Key: user_central_detail_connect_title_isNotifyOnDisconnection
      ///
      /// Locales: en
      var user_central_detail_connect_title_isNotifyOnDisconnection: RswiftResources.StringResource { .init(key: "user_central_detail_connect_title_isNotifyOnDisconnection", tableName: "Localizable", source: source, developmentValue: "isNotifyOnDisconnection: Bool", comment: nil) }

      /// en translation: isNotifyOnNotification: Bool
      ///
      /// Key: user_central_detail_connect_title_isNotifyOnNotification
      ///
      /// Locales: en
      var user_central_detail_connect_title_isNotifyOnNotification: RswiftResources.StringResource { .init(key: "user_central_detail_connect_title_isNotifyOnNotification", tableName: "Localizable", source: source, developmentValue: "isNotifyOnNotification: Bool", comment: nil) }

      /// en translation: isRequiresANCS: Bool?
      ///
      /// Key: user_central_detail_connect_title_isRequiresANCS
      ///
      /// Locales: en
      var user_central_detail_connect_title_isRequiresANCS: RswiftResources.StringResource { .init(key: "user_central_detail_connect_title_isRequiresANCS", tableName: "Localizable", source: source, developmentValue: "isRequiresANCS: Bool?", comment: nil) }

      /// en translation: startDelay: TimeInterval?
      ///
      /// Key: user_central_detail_connect_title_startDelay
      ///
      /// Locales: en
      var user_central_detail_connect_title_startDelay: RswiftResources.StringResource { .init(key: "user_central_detail_connect_title_startDelay", tableName: "Localizable", source: source, developmentValue: "startDelay: TimeInterval?", comment: nil) }

      /// en translation: Initialization Option
      ///
      /// Key: user_central_detail_init
      ///
      /// Locales: en
      var user_central_detail_init: RswiftResources.StringResource { .init(key: "user_central_detail_init", tableName: "Localizable", source: source, developmentValue: "Initialization Option", comment: nil) }

      /// en translation: CBCentralManagerOptionShowPowerAlertKey
      ///
      /// Key: user_central_detail_init_key_isShowPowerAlert
      ///
      /// Locales: en
      var user_central_detail_init_key_isShowPowerAlert: RswiftResources.StringResource { .init(key: "user_central_detail_init_key_isShowPowerAlert", tableName: "Localizable", source: source, developmentValue: "CBCentralManagerOptionShowPowerAlertKey", comment: nil) }

      /// en translation: CBCentralManagerOptionRestoreIdentifierKey
      ///
      /// Key: user_central_detail_init_key_restoreIdentifier
      ///
      /// Locales: en
      var user_central_detail_init_key_restoreIdentifier: RswiftResources.StringResource { .init(key: "user_central_detail_init_key_restoreIdentifier", tableName: "Localizable", source: source, developmentValue: "CBCentralManagerOptionRestoreIdentifierKey", comment: nil) }

      /// en translation: 当蓝牙服务不可用时，如果应用实例化中央管理器，系统是否警告用户。
      ///
      /// Key: user_central_detail_init_subtitle_isShowPowerAlert
      ///
      /// Locales: en
      var user_central_detail_init_subtitle_isShowPowerAlert: RswiftResources.StringResource { .init(key: "user_central_detail_init_subtitle_isShowPowerAlert", tableName: "Localizable", source: source, developmentValue: "当蓝牙服务不可用时，如果应用实例化中央管理器，系统是否警告用户。", comment: nil) }

      /// en translation: 中央管理器要实例化的唯一标识符（UID）。 系统使用此UID标识特定的中央管理器。因此，UID必须保持不变，以便后续执行应用程序来恢复中央管理器。
      ///
      /// Key: user_central_detail_init_subtitle_restoreIdentifier
      ///
      /// Locales: en
      var user_central_detail_init_subtitle_restoreIdentifier: RswiftResources.StringResource { .init(key: "user_central_detail_init_subtitle_restoreIdentifier", tableName: "Localizable", source: source, developmentValue: "中央管理器要实例化的唯一标识符（UID）。\n系统使用此UID标识特定的中央管理器。因此，UID必须保持不变，以便后续执行应用程序来恢复中央管理器。", comment: nil) }

      /// en translation: isShowPowerAlert: Bool
      ///
      /// Key: user_central_detail_init_title_isShowPowerAlert
      ///
      /// Locales: en
      var user_central_detail_init_title_isShowPowerAlert: RswiftResources.StringResource { .init(key: "user_central_detail_init_title_isShowPowerAlert", tableName: "Localizable", source: source, developmentValue: "isShowPowerAlert: Bool", comment: nil) }

      /// en translation: restoreIdentifier: String?
      ///
      /// Key: user_central_detail_init_title_restoreIdentifier
      ///
      /// Locales: en
      var user_central_detail_init_title_restoreIdentifier: RswiftResources.StringResource { .init(key: "user_central_detail_init_title_restoreIdentifier", tableName: "Localizable", source: source, developmentValue: "restoreIdentifier: String?", comment: nil) }

      /// en translation: Scanning Option
      ///
      /// Key: user_central_detail_scan
      ///
      /// Locales: en
      var user_central_detail_scan: RswiftResources.StringResource { .init(key: "user_central_detail_scan", tableName: "Localizable", source: source, developmentValue: "Scanning Option", comment: nil) }

      /// en translation: CBCentralManagerScanOptionAllowDuplicatesKey
      ///
      /// Key: user_central_detail_scan_key_isAllowDuplicates
      ///
      /// Locales: en
      var user_central_detail_scan_key_isAllowDuplicates: RswiftResources.StringResource { .init(key: "user_central_detail_scan_key_isAllowDuplicates", tableName: "Localizable", source: source, developmentValue: "CBCentralManagerScanOptionAllowDuplicatesKey", comment: nil) }

      /// en translation: CBCentralManagerScanOptionSolicitedServiceUUIDsKey
      ///
      /// Key: user_central_detail_scan_key_solicitedServiceUUIDs
      ///
      /// Locales: en
      var user_central_detail_scan_key_solicitedServiceUUIDs: RswiftResources.StringResource { .init(key: "user_central_detail_scan_key_solicitedServiceUUIDs", tableName: "Localizable", source: source, developmentValue: "CBCentralManagerScanOptionSolicitedServiceUUIDsKey", comment: nil) }

      /// en translation: 是否应在不进行重复筛选的情况下运行扫描。 如果 `true` ，则中心禁用过滤，并在每次从外围设备接收通告数据包时生成发现事件。 如果 `false` （默认值），则中心将同一外围设备的多个发现合并为单个发现事件。
      ///
      /// Key: user_central_detail_scan_subtitle_isAllowDuplicates
      ///
      /// Locales: en
      var user_central_detail_scan_subtitle_isAllowDuplicates: RswiftResources.StringResource { .init(key: "user_central_detail_scan_subtitle_isAllowDuplicates", tableName: "Localizable", source: source, developmentValue: "是否应在不进行重复筛选的情况下运行扫描。\n如果 `true` ，则中心禁用过滤，并在每次从外围设备接收通告数据包时生成发现事件。\n如果 `false` （默认值），则中心将同一外围设备的多个发现合并为单个发现事件。", comment: nil) }

      /// en translation: 是要扫描的服务 UUID 数组。 指定此扫描选项会导致中央管理器还扫描请求阵列中包含的任何服务的外围设备。
      ///
      /// Key: user_central_detail_scan_subtitle_solicitedServiceUUIDs
      ///
      /// Locales: en
      var user_central_detail_scan_subtitle_solicitedServiceUUIDs: RswiftResources.StringResource { .init(key: "user_central_detail_scan_subtitle_solicitedServiceUUIDs", tableName: "Localizable", source: source, developmentValue: "是要扫描的服务 UUID 数组。\n指定此扫描选项会导致中央管理器还扫描请求阵列中包含的任何服务的外围设备。", comment: nil) }

      /// en translation: isAllowDuplicates: Bool
      ///
      /// Key: user_central_detail_scan_title_isAllowDuplicates
      ///
      /// Locales: en
      var user_central_detail_scan_title_isAllowDuplicates: RswiftResources.StringResource { .init(key: "user_central_detail_scan_title_isAllowDuplicates", tableName: "Localizable", source: source, developmentValue: "isAllowDuplicates: Bool", comment: nil) }

      /// en translation: solicitedServiceUUIDs: [CBUUID]?
      ///
      /// Key: user_central_detail_scan_title_solicitedServiceUUIDs
      ///
      /// Locales: en
      var user_central_detail_scan_title_solicitedServiceUUIDs: RswiftResources.StringResource { .init(key: "user_central_detail_scan_title_solicitedServiceUUIDs", tableName: "Localizable", source: source, developmentValue: "solicitedServiceUUIDs: [CBUUID]?", comment: nil) }

      /// en translation: 个人信息
      ///
      /// Key: user_info
      ///
      /// Locales: en
      var user_info: RswiftResources.StringResource { .init(key: "user_info", tableName: "Localizable", source: source, developmentValue: "个人信息", comment: nil) }

      /// en translation: 账号
      ///
      /// Key: user_info_account
      ///
      /// Locales: en
      var user_info_account: RswiftResources.StringResource { .init(key: "user_info_account", tableName: "Localizable", source: source, developmentValue: "账号", comment: nil) }

      /// en translation: 所在地
      ///
      /// Key: user_info_address
      ///
      /// Locales: en
      var user_info_address: RswiftResources.StringResource { .init(key: "user_info_address", tableName: "Localizable", source: source, developmentValue: "所在地", comment: nil) }

      /// en translation: 头像
      ///
      /// Key: user_info_avatar
      ///
      /// Locales: en
      var user_info_avatar: RswiftResources.StringResource { .init(key: "user_info_avatar", tableName: "Localizable", source: source, developmentValue: "头像", comment: nil) }

      /// en translation: 出生日期
      ///
      /// Key: user_info_birthday
      ///
      /// Locales: en
      var user_info_birthday: RswiftResources.StringResource { .init(key: "user_info_birthday", tableName: "Localizable", source: source, developmentValue: "出生日期", comment: nil) }

      /// en translation: 邮箱号
      ///
      /// Key: user_info_email
      ///
      /// Locales: en
      var user_info_email: RswiftResources.StringResource { .init(key: "user_info_email", tableName: "Localizable", source: source, developmentValue: "邮箱号", comment: nil) }

      /// en translation: 性别
      ///
      /// Key: user_info_gender
      ///
      /// Locales: en
      var user_info_gender: RswiftResources.StringResource { .init(key: "user_info_gender", tableName: "Localizable", source: source, developmentValue: "性别", comment: nil) }

      /// en translation: 女
      ///
      /// Key: user_info_gender_female
      ///
      /// Locales: en
      var user_info_gender_female: RswiftResources.StringResource { .init(key: "user_info_gender_female", tableName: "Localizable", source: source, developmentValue: "女", comment: nil) }

      /// en translation: 男
      ///
      /// Key: user_info_gender_male
      ///
      /// Locales: en
      var user_info_gender_male: RswiftResources.StringResource { .init(key: "user_info_gender_male", tableName: "Localizable", source: source, developmentValue: "男", comment: nil) }

      /// en translation: 未知
      ///
      /// Key: user_info_gender_unknown
      ///
      /// Locales: en
      var user_info_gender_unknown: RswiftResources.StringResource { .init(key: "user_info_gender_unknown", tableName: "Localizable", source: source, developmentValue: "未知", comment: nil) }

      /// en translation: UID
      ///
      /// Key: user_info_id
      ///
      /// Locales: en
      var user_info_id: RswiftResources.StringResource { .init(key: "user_info_id", tableName: "Localizable", source: source, developmentValue: "UID", comment: nil) }

      /// en translation: 座右铭
      ///
      /// Key: user_info_motto
      ///
      /// Locales: en
      var user_info_motto: RswiftResources.StringResource { .init(key: "user_info_motto", tableName: "Localizable", source: source, developmentValue: "座右铭", comment: nil) }

      /// en translation: 昵称
      ///
      /// Key: user_info_nickname
      ///
      /// Locales: en
      var user_info_nickname: RswiftResources.StringResource { .init(key: "user_info_nickname", tableName: "Localizable", source: source, developmentValue: "昵称", comment: nil) }

      /// en translation: 手机号
      ///
      /// Key: user_info_phone
      ///
      /// Locales: en
      var user_info_phone: RswiftResources.StringResource { .init(key: "user_info_phone", tableName: "Localizable", source: source, developmentValue: "手机号", comment: nil) }

      /// en translation: 密码找回
      ///
      /// Key: user_pwdFindback
      ///
      /// Locales: en
      var user_pwdFindback: RswiftResources.StringResource { .init(key: "user_pwdFindback", tableName: "Localizable", source: source, developmentValue: "密码找回", comment: nil) }

      /// en translation: 忘记密码？
      ///
      /// Key: user_signIn_action_forgetPwd
      ///
      /// Locales: en
      var user_signIn_action_forgetPwd: RswiftResources.StringResource { .init(key: "user_signIn_action_forgetPwd", tableName: "Localizable", source: source, developmentValue: "忘记密码？", comment: nil) }

      /// en translation: 发送验证码
      ///
      /// Key: user_signIn_action_sendCode
      ///
      /// Locales: en
      var user_signIn_action_sendCode: RswiftResources.StringResource { .init(key: "user_signIn_action_sendCode", tableName: "Localizable", source: source, developmentValue: "发送验证码", comment: nil) }

      /// en translation: %1$@秒
      ///
      /// Key: user_signIn_action_sendCode_counting
      ///
      /// Locales: en
      var user_signIn_action_sendCode_counting: RswiftResources.StringResource1<String> { .init(key: "user_signIn_action_sendCode_counting", tableName: "Localizable", source: source, developmentValue: "%1$@秒", comment: nil) }

      /// en translation: 登录
      ///
      /// Key: user_signIn_action_signIn
      ///
      /// Locales: en
      var user_signIn_action_signIn: RswiftResources.StringResource { .init(key: "user_signIn_action_signIn", tableName: "Localizable", source: source, developmentValue: "登录", comment: nil) }

      /// en translation: 我已阅读并同意%1$@和%2$@
      ///
      /// Key: user_signIn_agreement
      ///
      /// Locales: en
      var user_signIn_agreement: RswiftResources.StringResource2<String, String> { .init(key: "user_signIn_agreement", tableName: "Localizable", source: source, developmentValue: "我已阅读并同意%1$@和%2$@", comment: nil) }

      /// en translation: 《隐私协议》
      ///
      /// Key: user_signIn_agreement_policy
      ///
      /// Locales: en
      var user_signIn_agreement_policy: RswiftResources.StringResource { .init(key: "user_signIn_agreement_policy", tableName: "Localizable", source: source, developmentValue: "《隐私协议》", comment: nil) }

      /// en translation: 《服务条款》
      ///
      /// Key: user_signIn_agreement_term
      ///
      /// Locales: en
      var user_signIn_agreement_term: RswiftResources.StringResource { .init(key: "user_signIn_agreement_term", tableName: "Localizable", source: source, developmentValue: "《服务条款》", comment: nil) }

      /// en translation: 请输入账号/手机号/邮箱号
      ///
      /// Key: user_signIn_input_account_ph
      ///
      /// Locales: en
      var user_signIn_input_account_ph: RswiftResources.StringResource { .init(key: "user_signIn_input_account_ph", tableName: "Localizable", source: source, developmentValue: "请输入账号/手机号/邮箱号", comment: nil) }

      /// en translation: 请输入验证码
      ///
      /// Key: user_signIn_input_code_ph
      ///
      /// Locales: en
      var user_signIn_input_code_ph: RswiftResources.StringResource { .init(key: "user_signIn_input_code_ph", tableName: "Localizable", source: source, developmentValue: "请输入验证码", comment: nil) }

      /// en translation: 请输入密码
      ///
      /// Key: user_signIn_input_pwd_ph
      ///
      /// Locales: en
      var user_signIn_input_pwd_ph: RswiftResources.StringResource { .init(key: "user_signIn_input_pwd_ph", tableName: "Localizable", source: source, developmentValue: "请输入密码", comment: nil) }

      /// en translation: 登录方式
      ///
      /// Key: user_signIn_mode
      ///
      /// Locales: en
      var user_signIn_mode: RswiftResources.StringResource { .init(key: "user_signIn_mode", tableName: "Localizable", source: source, developmentValue: "登录方式", comment: nil) }

      /// en translation: 验证码登录
      ///
      /// Key: user_signIn_mode_code
      ///
      /// Locales: en
      var user_signIn_mode_code: RswiftResources.StringResource { .init(key: "user_signIn_mode_code", tableName: "Localizable", source: source, developmentValue: "验证码登录", comment: nil) }

      /// en translation: 密码登录
      ///
      /// Key: user_signIn_mode_pwd
      ///
      /// Locales: en
      var user_signIn_mode_pwd: RswiftResources.StringResource { .init(key: "user_signIn_mode_pwd", tableName: "Localizable", source: source, developmentValue: "密码登录", comment: nil) }

      /// en translation: 未注册的账号将自动注册并登录
      ///
      /// Key: user_signIn_tip_code
      ///
      /// Locales: en
      var user_signIn_tip_code: RswiftResources.StringResource { .init(key: "user_signIn_tip_code", tableName: "Localizable", source: source, developmentValue: "未注册的账号将自动注册并登录", comment: nil) }

      /// en translation: 请使用已注册的账号登录
      ///
      /// Key: user_signIn_tip_pwd
      ///
      /// Locales: en
      var user_signIn_tip_pwd: RswiftResources.StringResource { .init(key: "user_signIn_tip_pwd", tableName: "Localizable", source: source, developmentValue: "请使用已注册的账号登录", comment: nil) }

      /// en translation: 登录
      ///
      /// Key: user_sign_in
      ///
      /// Locales: en
      var user_sign_in: RswiftResources.StringResource { .init(key: "user_sign_in", tableName: "Localizable", source: source, developmentValue: "登录", comment: nil) }

      /// en translation: 登出
      ///
      /// Key: user_sign_out
      ///
      /// Locales: en
      var user_sign_out: RswiftResources.StringResource { .init(key: "user_sign_out", tableName: "Localizable", source: source, developmentValue: "登出", comment: nil) }

      /// en translation: 注册
      ///
      /// Key: user_sign_up
      ///
      /// Locales: en
      var user_sign_up: RswiftResources.StringResource { .init(key: "user_sign_up", tableName: "Localizable", source: source, developmentValue: "注册", comment: nil) }
    }

    /// This `_R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      let source: RswiftResources.StringResource.Source
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 23 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `auxiliary`.
    var auxiliary: RswiftResources.ColorResource { .init(name: "auxiliary", path: [], bundle: bundle) }

    /// Color `background`.
    var background: RswiftResources.ColorResource { .init(name: "background", path: [], bundle: bundle) }

    /// Color `balckAlways`.
    var balckAlways: RswiftResources.ColorResource { .init(name: "balckAlways", path: [], bundle: bundle) }

    /// Color `black`.
    var black: RswiftResources.ColorResource { .init(name: "black", path: [], bundle: bundle) }

    /// Color `content`.
    var content: RswiftResources.ColorResource { .init(name: "content", path: [], bundle: bundle) }

    /// Color `darkGray`.
    var darkGray: RswiftResources.ColorResource { .init(name: "darkGray", path: [], bundle: bundle) }

    /// Color `detail`.
    var detail: RswiftResources.ColorResource { .init(name: "detail", path: [], bundle: bundle) }

    /// Color `disabled`.
    var disabled: RswiftResources.ColorResource { .init(name: "disabled", path: [], bundle: bundle) }

    /// Color `divider`.
    var divider: RswiftResources.ColorResource { .init(name: "divider", path: [], bundle: bundle) }

    /// Color `error`.
    var error: RswiftResources.ColorResource { .init(name: "error", path: [], bundle: bundle) }

    /// Color `gray`.
    var gray: RswiftResources.ColorResource { .init(name: "gray", path: [], bundle: bundle) }

    /// Color `highlight`.
    var highlight: RswiftResources.ColorResource { .init(name: "highlight", path: [], bundle: bundle) }

    /// Color `lightGray`.
    var lightGray: RswiftResources.ColorResource { .init(name: "lightGray", path: [], bundle: bundle) }

    /// Color `link`.
    var link: RswiftResources.ColorResource { .init(name: "link", path: [], bundle: bundle) }

    /// Color `placeholder`.
    var placeholder: RswiftResources.ColorResource { .init(name: "placeholder", path: [], bundle: bundle) }

    /// Color `subtitle`.
    var subtitle: RswiftResources.ColorResource { .init(name: "subtitle", path: [], bundle: bundle) }

    /// Color `success`.
    var success: RswiftResources.ColorResource { .init(name: "success", path: [], bundle: bundle) }

    /// Color `theme`.
    var theme: RswiftResources.ColorResource { .init(name: "theme", path: [], bundle: bundle) }

    /// Color `title`.
    var title: RswiftResources.ColorResource { .init(name: "title", path: [], bundle: bundle) }

    /// Color `warning`.
    var warning: RswiftResources.ColorResource { .init(name: "warning", path: [], bundle: bundle) }

    /// Color `white`.
    var white: RswiftResources.ColorResource { .init(name: "white", path: [], bundle: bundle) }

    /// Color `whiteAlways`.
    var whiteAlways: RswiftResources.ColorResource { .init(name: "whiteAlways", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 3 images, and 9 namespaces.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `back`.
    var back: RswiftResources.ImageResource { .init(name: "back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `close`.
    var close: RswiftResources.ImageResource { .init(name: "close", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo`.
    var logo: RswiftResources.ImageResource { .init(name: "logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    var adv: adv { .init(bundle: bundle) }
    var arrow: arrow { .init(bundle: bundle) }
    var bar: bar { .init(bundle: bundle) }
    var ble: ble { .init(bundle: bundle) }
    var com: com { .init(bundle: bundle) }
    var doc: doc { .init(bundle: bundle) }
    var hud: hud { .init(bundle: bundle) }
    var triangle: triangle { .init(bundle: bundle) }
    var user: user { .init(bundle: bundle) }

    func adv(bundle: Foundation.Bundle) -> adv {
      .init(bundle: bundle)
    }
    func arrow(bundle: Foundation.Bundle) -> arrow {
      .init(bundle: bundle)
    }
    func bar(bundle: Foundation.Bundle) -> bar {
      .init(bundle: bundle)
    }
    func ble(bundle: Foundation.Bundle) -> ble {
      .init(bundle: bundle)
    }
    func com(bundle: Foundation.Bundle) -> com {
      .init(bundle: bundle)
    }
    func doc(bundle: Foundation.Bundle) -> doc {
      .init(bundle: bundle)
    }
    func hud(bundle: Foundation.Bundle) -> hud {
      .init(bundle: bundle)
    }
    func triangle(bundle: Foundation.Bundle) -> triangle {
      .init(bundle: bundle)
    }
    func user(bundle: Foundation.Bundle) -> user {
      .init(bundle: bundle)
    }


    /// This `_R.image.adv` struct is generated, and contains static references to 6 advs.
    struct adv {
      let bundle: Foundation.Bundle

      /// Image `adv/connectable`.
      var connectable: RswiftResources.ImageResource { .init(name: "adv/connectable", path: ["adv"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `adv/localName`.
      var localName: RswiftResources.ImageResource { .init(name: "adv/localName", path: ["adv"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `adv/manufacturer`.
      var manufacturer: RswiftResources.ImageResource { .init(name: "adv/manufacturer", path: ["adv"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `adv/service`.
      var service: RswiftResources.ImageResource { .init(name: "adv/service", path: ["adv"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `adv/txPower`.
      var txPower: RswiftResources.ImageResource { .init(name: "adv/txPower", path: ["adv"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `adv/uuid`.
      var uuid: RswiftResources.ImageResource { .init(name: "adv/uuid", path: ["adv"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    }

    /// This `_R.image.arrow` struct is generated, and contains static references to 4 arrows.
    struct arrow {
      let bundle: Foundation.Bundle

      /// Image `arrow/bottom`.
      var bottom: RswiftResources.ImageResource { .init(name: "arrow/bottom", path: ["arrow"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `arrow/left`.
      var left: RswiftResources.ImageResource { .init(name: "arrow/left", path: ["arrow"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `arrow/right`.
      var right: RswiftResources.ImageResource { .init(name: "arrow/right", path: ["arrow"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `arrow/top`.
      var top: RswiftResources.ImageResource { .init(name: "arrow/top", path: ["arrow"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    }

    /// This `_R.image.bar` struct is generated, and contains static references to 0 bars, and 3 namespaces.
    struct bar {
      let bundle: Foundation.Bundle
      var adv: adv { .init(bundle: bundle) }
      var log: log { .init(bundle: bundle) }
      var service: service { .init(bundle: bundle) }

      func adv(bundle: Foundation.Bundle) -> adv {
        .init(bundle: bundle)
      }
      func log(bundle: Foundation.Bundle) -> log {
        .init(bundle: bundle)
      }
      func service(bundle: Foundation.Bundle) -> service {
        .init(bundle: bundle)
      }


      /// This `_R.image.bar.adv` struct is generated, and contains static references to 2 advs.
      struct adv {
        let bundle: Foundation.Bundle

        /// Image `bar/adv/nor`.
        var nor: RswiftResources.ImageResource { .init(name: "bar/adv/nor", path: ["bar", "adv"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `bar/adv/sel`.
        var sel: RswiftResources.ImageResource { .init(name: "bar/adv/sel", path: ["bar", "adv"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.bar.log` struct is generated, and contains static references to 2 logs.
      struct log {
        let bundle: Foundation.Bundle

        /// Image `bar/log/nor`.
        var nor: RswiftResources.ImageResource { .init(name: "bar/log/nor", path: ["bar", "log"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `bar/log/sel`.
        var sel: RswiftResources.ImageResource { .init(name: "bar/log/sel", path: ["bar", "log"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.bar.service` struct is generated, and contains static references to 2 services.
      struct service {
        let bundle: Foundation.Bundle

        /// Image `bar/service/nor`.
        var nor: RswiftResources.ImageResource { .init(name: "bar/service/nor", path: ["bar", "service"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `bar/service/sel`.
        var sel: RswiftResources.ImageResource { .init(name: "bar/service/sel", path: ["bar", "service"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }
    }

    /// This `_R.image.ble` struct is generated, and contains static references to 0 bles, and 1 namespaces.
    struct ble {
      let bundle: Foundation.Bundle
      var scan: scan { .init(bundle: bundle) }

      func scan(bundle: Foundation.Bundle) -> scan {
        .init(bundle: bundle)
      }


      /// This `_R.image.ble.scan` struct is generated, and contains static references to 2 scans.
      struct scan {
        let bundle: Foundation.Bundle

        /// Image `ble/scan/nor`.
        var nor: RswiftResources.ImageResource { .init(name: "ble/scan/nor", path: ["ble", "scan"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `ble/scan/sel`.
        var sel: RswiftResources.ImageResource { .init(name: "ble/scan/sel", path: ["ble", "scan"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }
    }

    /// This `_R.image.com` struct is generated, and contains static references to 6 coms, and 4 namespaces.
    struct com {
      let bundle: Foundation.Bundle

      /// Image `com/detail`.
      var detail: RswiftResources.ImageResource { .init(name: "com/detail", path: ["com"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `com/filter`.
      var filter: RswiftResources.ImageResource { .init(name: "com/filter", path: ["com"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `com/goto`.
      var goto: RswiftResources.ImageResource { .init(name: "com/goto", path: ["com"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `com/search`.
      var search: RswiftResources.ImageResource { .init(name: "com/search", path: ["com"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `com/setting`.
      var setting: RswiftResources.ImageResource { .init(name: "com/setting", path: ["com"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `com/tip`.
      var tip: RswiftResources.ImageResource { .init(name: "com/tip", path: ["com"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      var checkbox: checkbox { .init(bundle: bundle) }
      var rssi: rssi { .init(bundle: bundle) }
      var select: select { .init(bundle: bundle) }
      var sort: sort { .init(bundle: bundle) }

      func checkbox(bundle: Foundation.Bundle) -> checkbox {
        .init(bundle: bundle)
      }
      func rssi(bundle: Foundation.Bundle) -> rssi {
        .init(bundle: bundle)
      }
      func select(bundle: Foundation.Bundle) -> select {
        .init(bundle: bundle)
      }
      func sort(bundle: Foundation.Bundle) -> sort {
        .init(bundle: bundle)
      }


      /// This `_R.image.com.checkbox` struct is generated, and contains static references to 2 checkboxs.
      struct checkbox {
        let bundle: Foundation.Bundle

        /// Image `com/checkbox/nor`.
        var nor: RswiftResources.ImageResource { .init(name: "com/checkbox/nor", path: ["com", "checkbox"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/checkbox/sel`.
        var sel: RswiftResources.ImageResource { .init(name: "com/checkbox/sel", path: ["com", "checkbox"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.com.rssi` struct is generated, and contains static references to 6 rssis.
      struct rssi {
        let bundle: Foundation.Bundle

        /// Image `com/rssi/level0`.
        var level0: RswiftResources.ImageResource { .init(name: "com/rssi/level0", path: ["com", "rssi"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/rssi/level1`.
        var level1: RswiftResources.ImageResource { .init(name: "com/rssi/level1", path: ["com", "rssi"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/rssi/level2`.
        var level2: RswiftResources.ImageResource { .init(name: "com/rssi/level2", path: ["com", "rssi"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/rssi/level3`.
        var level3: RswiftResources.ImageResource { .init(name: "com/rssi/level3", path: ["com", "rssi"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/rssi/level4`.
        var level4: RswiftResources.ImageResource { .init(name: "com/rssi/level4", path: ["com", "rssi"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/rssi/level5`.
        var level5: RswiftResources.ImageResource { .init(name: "com/rssi/level5", path: ["com", "rssi"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.com.select` struct is generated, and contains static references to 2 selects.
      struct select {
        let bundle: Foundation.Bundle

        /// Image `com/select/nor`.
        var nor: RswiftResources.ImageResource { .init(name: "com/select/nor", path: ["com", "select"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/select/sel`.
        var sel: RswiftResources.ImageResource { .init(name: "com/select/sel", path: ["com", "select"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.com.sort` struct is generated, and contains static references to 3 sorts.
      struct sort {
        let bundle: Foundation.Bundle

        /// Image `com/sort/asc`.
        var asc: RswiftResources.ImageResource { .init(name: "com/sort/asc", path: ["com", "sort"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/sort/des`.
        var des: RswiftResources.ImageResource { .init(name: "com/sort/des", path: ["com", "sort"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `com/sort/none`.
        var none: RswiftResources.ImageResource { .init(name: "com/sort/none", path: ["com", "sort"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }
    }

    /// This `_R.image.doc` struct is generated, and contains static references to 2 docs.
    struct doc {
      let bundle: Foundation.Bundle

      /// Image `doc/file`.
      var file: RswiftResources.ImageResource { .init(name: "doc/file", path: ["doc"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `doc/folder`.
      var folder: RswiftResources.ImageResource { .init(name: "doc/folder", path: ["doc"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    }

    /// This `_R.image.hud` struct is generated, and contains static references to 6 huds.
    struct hud {
      let bundle: Foundation.Bundle

      /// Image `hud/ask`.
      var ask: RswiftResources.ImageResource { .init(name: "hud/ask", path: ["hud"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `hud/ban`.
      var ban: RswiftResources.ImageResource { .init(name: "hud/ban", path: ["hud"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `hud/failure`.
      var failure: RswiftResources.ImageResource { .init(name: "hud/failure", path: ["hud"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `hud/info`.
      var info: RswiftResources.ImageResource { .init(name: "hud/info", path: ["hud"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `hud/loading`.
      var loading: RswiftResources.ImageResource { .init(name: "hud/loading", path: ["hud"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `hud/success`.
      var success: RswiftResources.ImageResource { .init(name: "hud/success", path: ["hud"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    }

    /// This `_R.image.triangle` struct is generated, and contains static references to 4 triangles.
    struct triangle {
      let bundle: Foundation.Bundle

      /// Image `triangle/bottom`.
      var bottom: RswiftResources.ImageResource { .init(name: "triangle/bottom", path: ["triangle"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `triangle/left`.
      var left: RswiftResources.ImageResource { .init(name: "triangle/left", path: ["triangle"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `triangle/right`.
      var right: RswiftResources.ImageResource { .init(name: "triangle/right", path: ["triangle"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

      /// Image `triangle/top`.
      var top: RswiftResources.ImageResource { .init(name: "triangle/top", path: ["triangle"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    }

    /// This `_R.image.user` struct is generated, and contains static references to 1 users, and 5 namespaces.
    struct user {
      let bundle: Foundation.Bundle

      /// Image `user/user`.
      var user: RswiftResources.ImageResource { .init(name: "user/user", path: ["user"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      var center: center { .init(bundle: bundle) }
      var central: central { .init(bundle: bundle) }
      var gender: gender { .init(bundle: bundle) }
      var info: info { .init(bundle: bundle) }
      var sign: sign { .init(bundle: bundle) }

      func center(bundle: Foundation.Bundle) -> center {
        .init(bundle: bundle)
      }
      func central(bundle: Foundation.Bundle) -> central {
        .init(bundle: bundle)
      }
      func gender(bundle: Foundation.Bundle) -> gender {
        .init(bundle: bundle)
      }
      func info(bundle: Foundation.Bundle) -> info {
        .init(bundle: bundle)
      }
      func sign(bundle: Foundation.Bundle) -> sign {
        .init(bundle: bundle)
      }


      /// This `_R.image.user.center` struct is generated, and contains static references to 3 centers.
      struct center {
        let bundle: Foundation.Bundle

        /// Image `user/center/central`.
        var central: RswiftResources.ImageResource { .init(name: "user/center/central", path: ["user", "center"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/center/peripheral`.
        var peripheral: RswiftResources.ImageResource { .init(name: "user/center/peripheral", path: ["user", "center"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/center/security`.
        var security: RswiftResources.ImageResource { .init(name: "user/center/security", path: ["user", "center"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.user.central` struct is generated, and contains static references to 0 centrals, and 1 namespaces.
      struct central {
        let bundle: Foundation.Bundle
        var detail: detail { .init(bundle: bundle) }

        func detail(bundle: Foundation.Bundle) -> detail {
          .init(bundle: bundle)
        }


        /// This `_R.image.user.central.detail` struct is generated, and contains static references to 11 details.
        struct detail {
          let bundle: Foundation.Bundle

          /// Image `user/central/detail/alert`.
          var alert: RswiftResources.ImageResource { .init(name: "user/central/detail/alert", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/bridge`.
          var bridge: RswiftResources.ImageResource { .init(name: "user/central/detail/bridge", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/connect`.
          var connect: RswiftResources.ImageResource { .init(name: "user/central/detail/connect", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/delay`.
          var delay: RswiftResources.ImageResource { .init(name: "user/central/detail/delay", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/disconnect`.
          var disconnect: RswiftResources.ImageResource { .init(name: "user/central/detail/disconnect", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/duplicate`.
          var duplicate: RswiftResources.ImageResource { .init(name: "user/central/detail/duplicate", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/notify`.
          var notify: RswiftResources.ImageResource { .init(name: "user/central/detail/notify", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/reconnect`.
          var reconnect: RswiftResources.ImageResource { .init(name: "user/central/detail/reconnect", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/request`.
          var request: RswiftResources.ImageResource { .init(name: "user/central/detail/request", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/restore`.
          var restore: RswiftResources.ImageResource { .init(name: "user/central/detail/restore", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/central/detail/uuid`.
          var uuid: RswiftResources.ImageResource { .init(name: "user/central/detail/uuid", path: ["user", "central", "detail"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
        }
      }

      /// This `_R.image.user.gender` struct is generated, and contains static references to 2 genders.
      struct gender {
        let bundle: Foundation.Bundle

        /// Image `user/gender/female`.
        var female: RswiftResources.ImageResource { .init(name: "user/gender/female", path: ["user", "gender"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/gender/male`.
        var male: RswiftResources.ImageResource { .init(name: "user/gender/male", path: ["user", "gender"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.user.info` struct is generated, and contains static references to 9 infos.
      struct info {
        let bundle: Foundation.Bundle

        /// Image `user/info/account`.
        var account: RswiftResources.ImageResource { .init(name: "user/info/account", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/info/address`.
        var address: RswiftResources.ImageResource { .init(name: "user/info/address", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/info/avatar`.
        var avatar: RswiftResources.ImageResource { .init(name: "user/info/avatar", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/info/birthday`.
        var birthday: RswiftResources.ImageResource { .init(name: "user/info/birthday", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/info/email`.
        var email: RswiftResources.ImageResource { .init(name: "user/info/email", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/info/gender`.
        var gender: RswiftResources.ImageResource { .init(name: "user/info/gender", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/info/motto`.
        var motto: RswiftResources.ImageResource { .init(name: "user/info/motto", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/info/nickname`.
        var nickname: RswiftResources.ImageResource { .init(name: "user/info/nickname", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/info/phone`.
        var phone: RswiftResources.ImageResource { .init(name: "user/info/phone", path: ["user", "info"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.user.sign` struct is generated, and contains static references to 3 signs, and 1 namespaces.
      struct sign {
        let bundle: Foundation.Bundle

        /// Image `user/sign/account`.
        var account: RswiftResources.ImageResource { .init(name: "user/sign/account", path: ["user", "sign"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/sign/code`.
        var code: RswiftResources.ImageResource { .init(name: "user/sign/code", path: ["user", "sign"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `user/sign/pwd`.
        var pwd: RswiftResources.ImageResource { .init(name: "user/sign/pwd", path: ["user", "sign"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
        var eye: eye { .init(bundle: bundle) }

        func eye(bundle: Foundation.Bundle) -> eye {
          .init(bundle: bundle)
        }


        /// This `_R.image.user.sign.eye` struct is generated, and contains static references to 2 eyes.
        struct eye {
          let bundle: Foundation.Bundle

          /// Image `user/sign/eye/close`.
          var close: RswiftResources.ImageResource { .init(name: "user/sign/eye/close", path: ["user", "sign", "eye"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

          /// Image `user/sign/eye/open`.
          var `open`: RswiftResources.ImageResource { .init(name: "user/sign/eye/open", path: ["user", "sign", "eye"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
        }
      }
    }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {

      }
    }
  }
}